
Calculating Sequence Length, GC Content, AT Content, And Quality Score
============================================================================

Input
------
  s is a string of values 

  | quality_score measure the probability that a base is called incorrectly

  Column Syntax - ``.withColumn (colName: String, col: Column)`` used to change the value, convert the datatype of an existing column, create a new column,

  | ``colName:String`` – specify a new column you wanted to create. use an existing column to update the value.

  | ``col:Column`` – column expression.

  .. Code-block::

    def function_name(parameters):
    """docstring"""
    statement(s)

  Keyword def that marks the start of the function header.
  Parameters (arguments) through which we pass values to a function.
  A colon (:) to mark the end of the function header
  A return statement to return a value from the function.


.. code-block::

    @udf("float")

  def quality_score(s):
    result=[(ord(i)-33) for i in s]
    return sum(result)/len(result)
    
  content_data=(input_data
                .withColumn('Length',F.length('seq'))
                .withColumn('GC',F.col('Length')-F.length(F.regexp_replace(F.col('seq'),'[CG]','')))
                .withColumn('AT',F.col('Length')-F.length(F.regexp_replace(F.col('seq'),'[AT]','')))
                .withColumn('GC+AT',F.col('GC')+F.col('AT'))
                .withColumn('GC%',F.col('GC')/F.col('GC+AT'))
                .withColumn('N_count',F.col('Length')-F.length(F.regexp_replace(F.col('seq'),'N','')))
                .select('id','sid','Length','GC','AT','GC+AT','GC%','N_count',quality_score('qual').alias('average_qual'))
              )


Output
------

.. code-block:: 

  id:long
  sid:string
  Length:integer
  GC:integer
  AT:integer
  GC+AT:integer
  GC%:double
  N_count:integer
  average_qual:float

Output Explanation:


  The names 'id', 'sid', 'Length', 'GC',' AT', 'GC+AT', 'GC%', 'N_count', 'average_qual' are part of the file

  long,string,integer,double and float are data types 

  Data types - a classification that specifies which type of value a variable has

  Long data type to contain integer numbers that are too large to fit in the Integer data type. The default value of Long is 0.

  String data type is a sequence of characters, either as a literal constant or as some kind of variable.



Code Explanation
-----------------

.. code-block::

  @udf("float")


udf = user defined functions

  * A feature of Spark SQL to define new Column-based functions

  
.. code-block::

  def quality_score(s):
      result=[(ord(i)-33) for i in s]
      return sum(result)/len(result)


| Translate quality scores 

| ``[(ord(i)for i in s]`` returns the number from a given character 
  In FASTQ files, phred scores are represented using characters. Each character on the keyboard can be represented by a number, called an ascii code.
  The ASCII code starts from the number 33 always the way up to 89.
  Phred quality score is a measure of the quality of the identification of the nucleobases generated by automated DNA sequencing.
  return statement is used to end the execution of the function call and “returns” the result to the caller.
  

.. code-block::

  content_data=(input_data
                .withColumn('Length',F.length('seq'))
                .withColumn('GC',F.col('Length')-F.length(F.regexp_replace(F.col('seq'),'[CG]','')))
                .withColumn('AT',F.col('Length')-F.length(F.regexp_replace(F.col('seq'),'[AT]','')))
                .withColumn('GC+AT',F.col('GC')+F.col('AT'))
                .withColumn('GC%',F.col('GC')/F.col('GC+AT'))
                .withColumn('N_count',F.col('Length')-F.length(F.regexp_replace(F.col('seq'),'N','')))
                .select('id','sid','Length','GC','AT','GC+AT','GC%','N_count',quality_score('qual').alias('average_qual'))
              )


Creating a new column named ``'length'``

   * ``.withColumn('Length')`` names the column 'Length'
   * ``F.length('seq')`` is the length of the sequence under the name 'Length'  

Creating a new column named ``GC``

  ``F.regexp_replace(F.col('seq'),'[CG]',''))`` lets you replace the sequence of characters with CG
  * The syntax of regexp_replace function is ``'regexp_replace(str, regexp, rep [, position] )'``
  * regexp_replace function replaces all substrings of str that match regexp with rep.
  * By subtracting the old column length with the new column length, we can get the ``"GC"`` column

Creating a new column named ``GC+AT``

   * Creating a new column named ``'GC+AT'``
   * Using ``F.col('GC')+F.col('AT')`` to add the ``'GC'`` and ``'AT'`` column
   * This column will be the addition of the GC column and AT column

Creating a new column named ``GC%``

  * This column will be the the ``'GC'`` column divided by ``'GC+AT'`` column

``.select`` is used to select multiple columns

  * In this case, it's used to select the columns: 'id', 'sid', 'Length', 'GC',' AT', 'GC+AT', 'GC%', 'N_count', 'average_qual'
 
  * ``.alias`` returns this column aliased with a new name. So ``qual`` will be called ``average_qual``



